name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: 🔨 Compilation et Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Récupération du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Nécessaire pour SonarQube
      
      - name: 🛠️ Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: 🧰 Restauration des dépendances
        run: dotnet restore EcfDotnet.csproj
      
      - name: 🏗️ Compilation du projet
        run: dotnet build EcfDotnet.csproj --no-restore --configuration Release
      
      - name: 🧪 Exécution des tests unitaires
        run: dotnet test EcfDotnet.csproj --no-build --configuration Release --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage.opencover.xml
  
  trivy-scan:
    name: 🔍 Analyse des dépendances
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Récupération du code
        uses: actions/checkout@v3
      
      - name: 🛠️ Installation de Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      
      - name: 🔍 Analyse des dépendances avec Trivy
        run: |
          mkdir -p rapports
          trivy fs --format json --output rapports/trivy-deps.json .
          trivy fs --severity CRITICAL,HIGH --format table .
  
  trivy-docker-scan:
    name: 🔍 Analyse Docker avec Trivy
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Récupération du code
        uses: actions/checkout@v3
      
      - name: 🔍 Analyse Docker avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          format: 'json'
          output: 'trivy-dockerfile.json'
          severity: 'CRITICAL,HIGH'
  
  sonarqube-analysis:
    name: 📈 Analyse de qualité du code
    runs-on: ubuntu-latest
    needs: build-and-test
    if: false
    
    steps:
      - name: 📥 Récupération du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 🛠️ Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: 🧰 Installation de SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      
      - name: 📊 Analyse SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Vérification des variables d'environnement
          echo "SONAR_HOST_URL: ${SONAR_HOST_URL:-non défini}"
          echo "SONAR_TOKEN: ${SONAR_TOKEN:0:5}... (masqué)"
          
          # Exécution de l'analyse avec valeurs explicites
          dotnet sonarscanner begin \
            /k:"ECF_2_DOTNET" \
            /n:"ECF_2_DOTNET" \
            /d:sonar.host.url="${SONAR_HOST_URL:-http://localhost:9000}" \
            /d:sonar.login="${SONAR_TOKEN:-squ_12746e19fbeaa144c66692b406fdd5075b7c5b30}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
            /d:sonar.coverage.exclusions="**Test*.cs" \
            /d:sonar.sourceEncoding="UTF-8"
          
          dotnet build EcfDotnet.csproj --no-incremental
          
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN:-squ_12746e19fbeaa144c66692b406fdd5075b7c5b30}"
      
      - name: 📝 Création du rapport d'information SonarQube
        run: |
          mkdir -p rapports
          echo "Analyse SonarQube" > rapports/sonar-analysis-info.txt
          echo "=================" >> rapports/sonar-analysis-info.txt
          echo "Date: $(date '+%d/%m/%Y %H:%M:%S')" >> rapports/sonar-analysis-info.txt
          echo "Projet: ECF_2_DOTNET" >> rapports/sonar-analysis-info.txt
          echo "URL des résultats: ${SONAR_HOST_URL:-http://localhost:9000}/dashboard?id=ECF_2_DOTNET" >> rapports/sonar-analysis-info.txt
  
  e2e-tests:
    name: 🌐 Tests End-to-End
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Récupération du code
        uses: actions/checkout@v3
      
      - name: 🛠️ Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: 🧰 Restauration des dépendances
        run: dotnet restore EcfDotnet.csproj
      
      - name: 🏗️ Compilation du projet
        run: dotnet build EcfDotnet.csproj --no-restore --configuration Release
      
      - name: 🎭 Installation des navigateurs Playwright
        run: npx playwright install chromium
      
      - name: 🚀 Démarrage de l'application
        run: |
          dotnet run --project EcfDotnet.csproj --urls=http://localhost:5000 &
          sleep 10
      
      - name: 🧪 Exécution des tests E2E
        run: dotnet test EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj --no-build --configuration Release
