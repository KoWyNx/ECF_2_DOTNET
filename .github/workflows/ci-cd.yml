name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Compilation et Tests
    runs-on: ubuntu-latest
    
    steps:
      - name:  Récupération du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      
      - name:  Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name:  Restauration des dépendances
        run: dotnet restore EcfDotnet.csproj
      
      - name:  Compilation du projet
        run: dotnet build EcfDotnet.csproj --no-restore --configuration Release
      
      
  
  trivy-scan:
    name:  Analyse des dépendances
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name:  Récupération du code
        uses: actions/checkout@v3
      
      - name:  Installation de Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      
      - name:  Analyse des dépendances avec Trivy
        run: |
          mkdir -p rapports
          trivy fs --format json --output rapports/trivy-deps.json .
          trivy fs --severity CRITICAL,HIGH --format table .
  
  trivy-docker-scan:
    name:  Analyse Docker avec Trivy
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name:  Récupération du code
        uses: actions/checkout@v3
      
      - name:  Installation de Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      
      - name:  Analyse Docker avec Trivy
        run: |
          mkdir -p rapports
          trivy config --format json --output rapports/trivy-dockerfile.json .
          trivy config --severity CRITICAL,HIGH --format table .
  
  sonarqube-analysis:
    name:  Analyse de qualité du code
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name:  Récupération du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name:  Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name:  Installation de SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      
      - name:  Démarrage de l'analyse SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Vérification que l'URL SonarQube est définie
          if [ -z "$SONAR_HOST_URL" ]; then
            echo "SONAR_HOST_URL n'est pas défini. Analyse SonarQube ignorée."
            exit 0
          fi
          
          # Vérification de la disponibilité du serveur SonarQube
          if ! curl -s -f -o /dev/null "$SONAR_HOST_URL"; then
            echo "Impossible de se connecter à $SONAR_HOST_URL. Analyse SonarQube ignorée."
            exit 0
          fi
          
          dotnet sonarscanner begin \
            /k:"ECF_2_DOTNET" \
            /n:"ECF_2_DOTNET" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**Test*.cs" \
            /d:sonar.sourceEncoding="UTF-8"
      
      - name:  Compilation du projet pour SonarQube
        run: dotnet build EcfDotnet.csproj --no-incremental
      
      - name:  Finalisation de l'analyse SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Vérification que l'URL SonarQube est définie
          if [ -z "$SONAR_HOST_URL" ]; then
            echo "SONAR_HOST_URL n'est pas défini. Finalisation de l'analyse SonarQube ignorée."
            exit 0
          fi
          
          # Vérification de la disponibilité du serveur SonarQube
          if ! curl -s -f -o /dev/null "$SONAR_HOST_URL"; then
            echo "Impossible de se connecter à $SONAR_HOST_URL. Finalisation de l'analyse SonarQube ignorée."
            exit 0
          fi
          
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"
      
      - name:  Création du rapport d'information
        run: |
          mkdir -p rapports
          echo "Analyse SonarQube" > rapports/sonar-analysis-info.txt
          echo "=================" >> rapports/sonar-analysis-info.txt
          echo "Date: $(date '+%d/%m/%Y %H:%M:%S')" >> rapports/sonar-analysis-info.txt
          echo "Projet: ECF_2_DOTNET" >> rapports/sonar-analysis-info.txt
  
  e2e-tests:
    name:  Tests End-to-End
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Récupération du code
        uses: actions/checkout@v3
      
      - name:  Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name:  Restauration des dépendances des tests E2E
        run: dotnet restore EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj
      
      - name:  Installation et configuration de Playwright
        run: |
          # Installation du package Playwright
          dotnet add EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj package Microsoft.Playwright
          
          # Compilation du projet pour s'assurer que les dépendances sont résolues
          dotnet build EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj
          
          # Installation de l'outil CLI Playwright
          dotnet tool install --global Microsoft.Playwright.CLI
          
          # Installation des navigateurs
          playwright install chromium
      
      - name:  Démarrage de l'application
        run: |
          # Démarrer l'application en arrière-plan
          dotnet run --project EcfDotnet.csproj --urls=http://localhost:5017 &
          
          # Attendre que l'application soit prête
          echo "Attente du démarrage de l'application..."
          for i in {1..30}; do
            if curl -s http://localhost:5017 > /dev/null; then
              echo "Application démarrée avec succès!"
              break
            fi
            echo "Tentative $i: Application pas encore prête, nouvelle tentative dans 2 secondes..."
            sleep 2
          done
          
          # Vérifier si l'application est accessible
          if ! curl -s http://localhost:5017 > /dev/null; then
            echo "ERREUR: L'application n'a pas démarré correctement après 60 secondes."
            echo "Logs de l'application:"
            cat /tmp/app.log || echo "Aucun log disponible"
            exit 1
          fi
      
      - name:  Exécution des tests E2E
        run: dotnet test EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj --configuration Release
