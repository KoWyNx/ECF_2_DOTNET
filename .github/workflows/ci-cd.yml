name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: üî® Compilation et Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # N√©cessaire pour SonarQube
      
      - name: üõ†Ô∏è Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: üß∞ Restauration des d√©pendances
        run: dotnet restore
      
      - name: üèóÔ∏è Compilation du projet
        run: dotnet build --no-restore --configuration Release
      
      - name: üß™ Ex√©cution des tests unitaires
        run: dotnet test --no-build --configuration Release --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage.opencover.xml
      
      - name: üìä Publication des r√©sultats de tests
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            **/coverage.opencover.xml
            **/*.trx
  
  trivy-scan:
    name: üîç Analyse des d√©pendances
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
      
      - name: üõ†Ô∏è Installation de Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      
      - name: üîç Analyse des d√©pendances avec Trivy
        run: |
          mkdir -p rapports
          trivy fs --format json --output rapports/trivy-deps.json .
          trivy fs --severity CRITICAL,HIGH --format table .
      
      - name: üìä Publication des rapports Trivy
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: rapports/trivy-deps.json
  
  trivy-docker-scan:
    name: üîç Analyse Docker avec Trivy
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
      
      - name: üîç Analyse Docker avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          format: 'json'
          output: 'trivy-dockerfile.json'
          severity: 'CRITICAL,HIGH'
        
      - name: üìä Publication des rapports Trivy Docker
        uses: actions/upload-artifact@v3
        with:
          name: trivy-docker-report
          path: trivy-dockerfile.json
  
  sonarqube-analysis:
    name: üìà Analyse de qualit√© du code
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: üõ†Ô∏è Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: üß∞ Installation de SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      
      - name: üì• T√©l√©chargement des r√©sultats de tests
        uses: actions/download-artifact@v3
        with:
          name: test-results
      
      - name: üìä Analyse SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin \
            /k:"ECF_2_DOTNET" \
            /n:"ECF_2_DOTNET" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
            /d:sonar.coverage.exclusions="**Test*.cs" \
            /d:sonar.sourceEncoding="UTF-8"
          
          dotnet build --no-incremental
          
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"
      
      - name: üìù Cr√©ation du rapport d'information SonarQube
        run: |
          mkdir -p rapports
          echo "Analyse SonarQube" > rapports/sonar-analysis-info.txt
          echo "=================" >> rapports/sonar-analysis-info.txt
          echo "Date: $(date '+%d/%m/%Y %H:%M:%S')" >> rapports/sonar-analysis-info.txt
          echo "Projet: ECF_2_DOTNET" >> rapports/sonar-analysis-info.txt
          echo "URL des r√©sultats: ${SONAR_HOST_URL}/dashboard?id=ECF_2_DOTNET" >> rapports/sonar-analysis-info.txt
      
      - name: üìä Publication du rapport SonarQube
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: rapports/sonar-analysis-info.txt
  
  e2e-tests:
    name: üåê Tests End-to-End
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
      
      - name: üõ†Ô∏è Configuration .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: üß∞ Restauration des d√©pendances
        run: dotnet restore
      
      - name: üèóÔ∏è Compilation du projet
        run: dotnet build --no-restore --configuration Release
      
      - name: üé≠ Installation des navigateurs Playwright
        run: npx playwright install chromium
      
      - name: üöÄ D√©marrage de l'application
        run: |
          dotnet run --project EcfDotnet.csproj --urls=http://localhost:5000 &
          sleep 10
      
      - name: üß™ Ex√©cution des tests E2E
        run: dotnet test EcfDotnet.E2ETests.New/EcfDotnet.E2ETests.New.csproj --no-build --configuration Release
      
      - name: üìä Publication des rapports Playwright
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: |
            playwright-report.html
            *.png
  
  publish-reports:
    name: üìã Publication des rapports
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-tests, trivy-scan, trivy-docker-scan, sonarqube-analysis]
    if: always()
    
    steps:
      - name: üì• R√©cup√©ration du code
        uses: actions/checkout@v3
      
      - name: üì• T√©l√©chargement de tous les rapports
        uses: actions/download-artifact@v3
        with:
          path: all-reports
      
      - name: üì¶ Pr√©paration des rapports
        run: |
          mkdir -p rapports-consolides
          cp -r all-reports/test-results/* rapports-consolides/ || true
          cp -r all-reports/playwright-report/* rapports-consolides/ || true
          cp -r all-reports/trivy-report/* rapports-consolides/ || true
          cp -r all-reports/trivy-docker-report/* rapports-consolides/ || true
          cp -r all-reports/sonar-report/* rapports-consolides/ || true
      
      - name: üìä Cr√©ation du rapport de synth√®se
        run: |
          cat > rapports-consolides/rapport-synthese.html << EOL
          <!DOCTYPE html>
          <html lang="fr">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Rapport de Synth√®se - ECF_2_DOTNET</title>
              <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; color: #333; }
                  h1 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; }
                  h2 { color: #3498db; margin-top: 20px; }
                  .section { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                  .success { color: #28a745; }
                  .warning { color: #ffc107; }
                  .danger { color: #dc3545; }
                  .info { color: #17a2b8; }
              </style>
          </head>
          <body>
              <h1>Rapport de Synth√®se - ECF_2_DOTNET</h1>
              <div class="section">
                  <h2>Informations G√©n√©rales</h2>
                  <p>Date du rapport: $(date '+%d/%m/%Y %H:%M:%S')</p>
                  <p>Branche: \${{ github.ref_name }}</p>
                  <p>Commit: \${{ github.sha }}</p>
              </div>
              
              <div class="section">
                  <h2>R√©sultats des Tests</h2>
                  <p>Les r√©sultats d√©taill√©s des tests sont disponibles dans les artefacts du pipeline.</p>
              </div>
              
              <div class="section">
                  <h2>Analyse des D√©pendances (Trivy)</h2>
                  <p>Le rapport complet est disponible dans les artefacts du pipeline.</p>
              </div>
              
              <div class="section">
                  <h2>Analyse Docker avec Trivy</h2>
                  <p>Le rapport complet est disponible dans les artefacts du pipeline.</p>
              </div>
              
              <div class="section">
                  <h2>Analyse de Qualit√© du Code (SonarQube)</h2>
                  <p>Le rapport complet est disponible sur SonarQube.</p>
              </div>
          </body>
          </html>
          EOL
      
      - name: üìä Publication des rapports consolid√©s
        uses: actions/upload-artifact@v3
        with:
          name: rapports-consolides
          path: rapports-consolides/
